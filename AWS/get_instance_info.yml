---
  - name: Control AWS instances
    hosts: localhost
    connection: local
    gather_facts: no
    vars:
       region: ''
       servername: ''
       ssh_key: ''
       controller: 
         url: '{{ lookup("env", "CONTROLLER_HOST") }}'
         user: '{{ lookup("env", "CONTROLLER_USERNAME") }}'
         password: '{{ lookup("env", "CONTROLLER_PASSWORD") }}'
       
    tasks:

    - name: Get an AAP API Token and store it as new_token
      register: new_token
      ansible.builtin.uri:
        url: "https://{{ controller.url }}/api/v2/tokens/"
        method: POST
        user: "{{ controller.user }}"
        password: "{{ controller.password }}"
        validate_certs: no
        force_basic_auth: yes
        status_code: 201
        return_content: yes       
        
    #- name: Print out the new token
    #  ansible.builtin.debug: 
    #    msg: "{{ new_token.json.token }}"

    - name: Get instances id with tag {{ servername }} in {{ region }}
      register: instance_info
      amazon.aws.ec2_instance_info:
       region: "{{ region }}"
       filters:
         "tag:Name": "{{ servername }}"
         instance-state-name: [ "running"]
         "tag:Contact": "{{ my_email_address }}"
      
    #- name: Printing out instance_info.instances[0].instance_id
    #  when: instance_info.instances[0].instance_id is defined
    #  ansible.builtin.debug:
    #     msg: "{{ instance_info.instances[0].instance_id }}"

    - name: get the Administrator password
      register: admin_passwd
      #no_log: true
      ignore_errors: true
      community.aws.ec2_win_password:
        instance_id: "{{ instance_info.instances[0].instance_id }}"
        region: "{{ region }}"
        key_data: "{{ ssh_key }}"
        wait: true
        wait_timeout: 45

    - name: Update the Windows AWS machine credential
      ansible.controller.credential:
        controller_host: "{{ controller.url }}"
        controller_password: "{{ controller.password }}"
        controller_username: "{{ controller.user }}"
        controller_oauthtoken: "{{ new_token.json.token }}"
        name: Windows AWS Administrator
        organization: Red Hat
        description: Used in the Windows AWS Demo
        state: present
        update_secrets: true
        credential_type: Machine
        inputs:
          username: Administrator
          password: "{{ admin_passwd }}"

    - name: Update the Windows AWS Inventory
      ansible.controller.host:
        controller_host: "{{ controller.url }}"
        controller_password: "{{ controller.password }}"
        controller_username: "{{ controller.user }}"
        controller_oauthtoken: "{{ new_token.json.token }}"
        name: "{{ instance_info.instances[0].public_dns_name }}"
        inventory: "AWS Hosts"
        state: present
        enabled: true
    
    - name: Capture public dns name
      register: my_server
      ansible.builtin.set_stats:
        data:
          my_server: "{{ instance_info.instances[0].public_dns_name }}"

    - name: Capture public ip address
      register: my_public_ip
      ansible.builtin.set_stats:
        data:
          my_public_ip: "{{ instance_info.instances[0].public_ip_address }}"

    - name: Capture image id
      register: my_ami_id
      ansible.builtin.set_stats:
        data:
          my_ami_id: "{{ instance_info.instances[0].image_id }}"

    - name: Capture instance id
      register: my_instance_id
      ansible.builtin.set_stats:
        data:
          my_instance_id: "{{ instance_info.instances[0].instance_id }}"

    - name: Capture instance type
      register: my_instance_type
      ansible.builtin.set_stats:
        data:
          my_instance_type: "{{ instance_info.instances[0].instance_type }}"
    
    - name: Capture public ip address
      register: my_launch_time
      ansible.builtin.set_stats:
        data:
          my_launch_time: "{{ instance_info.instances[0].launch_time }}"

    - name: Capture availability zone
      register: my_availability_zone
      ansible.builtin.set_stats:
        data:
          my_availability_zone: "{{ instance_info.instances[0].placement.availability_zone }}"

    - name: Capture platform
      register: my_platform
      ansible.builtin.set_stats:
        data:
          my_platform: "{{ instance_info.instances[0].platform }}"
    
